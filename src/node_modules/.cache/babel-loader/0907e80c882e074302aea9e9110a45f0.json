{"ast":null,"code":"var _jsxFileName = \"/home/alexemdesgagne/octopus-telemetry/src/src/components/MissionManager.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useContext } from 'react';\nimport { GeneralContext } from \"../context/generalContext\";\nimport InputLabel from './common/Input/InputLabel';\nimport Button from './common/button/Button';\nimport Select from './common/select/Select';\nimport FormControl from './common/Form/FormControl';\nimport { useROSService } from '../hooks/useROSService';\nimport { useROSTopicPublisher } from '../hooks/useROSTopicPublisher';\nimport ROSLIB from \"roslib\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MissionManager = () => {\n  _s();\n\n  const [currentMissionName, setCurrentMissionName] = useState(\"\");\n  const [allMissions, setMissionsList] = useState([]); // Reponse en retour a l appel du service\n\n  const missionListCallback = useCallback(response => {\n    var missionsList = [];\n    missionsList = [];\n    var tempList = JSON.parse(JSON.stringify(response));\n    tempList = tempList[\"missions\"];\n    tempList = tempList.split(\";\");\n    tempList.sort(function (a, b) {\n      if (a.toLowerCase() < b.toLowerCase()) {\n        return -1;\n      } else if (a.toLowerCase() > b.toLowerCase()) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n    tempList.forEach(name => {\n      if (name !== \"\") {\n        missionsList.push(name);\n      }\n    });\n    console.log(missionsList);\n    setMissionsList(missionsList);\n  }, []);\n  const context = useContext(GeneralContext);\n  const missionNameMsgPublisher = useROSTopicPublisher(\"/mission_manager/mission_name_msg\", \"/mission_manager/MissionNameMsg\");\n  const missionManagerServiceCall = useROSService(missionListCallback, \"/mission_executor/list_missions\", \"ListMissions\"); // Selection d une missions dans le select.\n\n  const behaviorSelected = event => {\n    setCurrentMissionName(event.target.value);\n  }; // Publish du nom de la mission.\n\n\n  const loadMission = () => {\n    var toPublish = new ROSLIB.Message({\n      name: currentMissionName\n    });\n    missionNameMsgPublisher(toPublish);\n  }; // Appel du service pour update la liste de missions.\n\n\n  const updateMissionList = async () => {\n    missionManagerServiceCall({});\n  };\n\n  return /*#__PURE__*/_jsxDEV(GeneralContext.Consumer, {\n    children: context => context && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '100%',\n        height: '100%',\n        flexDirection: 'row',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          fontSize: '20px',\n          textAlign: 'center'\n        },\n        children: \"Mission Manager\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          id: \"select-outlined-label\",\n          children: \"Mission\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          labelId: \"select-outlined-label\",\n          id: \"select-outlined\",\n          label: \"Mission\",\n          style: {\n            backgroundColor: 'white'\n          },\n          handlerChange: behaviorSelected,\n          value: currentMissionName ? currentMissionName : \"None\",\n          listValue: allMissions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          fontSize: '20px',\n          textAlign: 'center'\n        },\n        children: \"Update List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          fontSize: '20px',\n          alignSelf: 'center'\n        },\n        handler: updateMissionList,\n        label: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          fontSize: '20px',\n          textAlign: 'center'\n        },\n        children: \"Load Mission\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        disabled: allMissions.length === 0,\n        style: {\n          fontSize: '20px',\n          alignSelf: 'center'\n        },\n        handler: loadMission,\n        label: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MissionManager, \"2Y9T5jhjp5j5wR/OlvJpXubULZI=\", false, function () {\n  return [useROSTopicPublisher, useROSService];\n});\n\n_c = MissionManager;\nexport default MissionManager;\n\nvar _c;\n\n$RefreshReg$(_c, \"MissionManager\");","map":{"version":3,"sources":["/home/alexemdesgagne/octopus-telemetry/src/src/components/MissionManager.tsx"],"names":["React","useState","useCallback","useContext","GeneralContext","InputLabel","Button","Select","FormControl","useROSService","useROSTopicPublisher","ROSLIB","MissionManager","currentMissionName","setCurrentMissionName","allMissions","setMissionsList","missionListCallback","response","missionsList","tempList","JSON","parse","stringify","split","sort","a","b","toLowerCase","forEach","name","push","console","log","context","missionNameMsgPublisher","missionManagerServiceCall","behaviorSelected","event","target","value","loadMission","toPublish","Message","updateMissionList","width","height","flexDirection","textAlign","fontSize","backgroundColor","alignSelf","length"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useContext } from 'react';\nimport { GeneralContext } from \"../context/generalContext\";\nimport InputLabel from './common/Input/InputLabel';\nimport Button from './common/button/Button';\nimport Select from './common/select/Select';\nimport FormControl from './common/Form/FormControl';\nimport { useROSService } from '../hooks/useROSService'\nimport { useROSTopicPublisher } from '../hooks/useROSTopicPublisher'\nimport ROSLIB from \"roslib\";\n\nconst MissionManager = () => {\n\n    const [currentMissionName, setCurrentMissionName] = useState(\"\");\n    const [allMissions, setMissionsList] = useState<[]>([]);\n\n    // Reponse en retour a l appel du service\n    const missionListCallback = useCallback(\n        (response: ROSLIB.ServiceResponse) => {\n            var missionsList: any = []\n            missionsList = []\n            var tempList = JSON.parse(JSON.stringify(response));\n            tempList = tempList[\"missions\"];\n            tempList = tempList.split(\";\");\n            tempList.sort(function (a: string, b: string) {\n              if ( a.toLowerCase() < b.toLowerCase() ) {\n                  return -1;\n              } else if ( a.toLowerCase() > b.toLowerCase() ) {\n                  return 1;\n              } else {\n                  return 0;\n              }});\n            tempList.forEach((name: string) => {\n              if(name !== \"\"){\n                missionsList.push(name);\n              }\n            });\n            console.log(missionsList);\n            setMissionsList(missionsList);\n          },\n          []\n    )\n\n    const context = useContext(GeneralContext)\n    const missionNameMsgPublisher = useROSTopicPublisher<any>(\"/mission_manager/mission_name_msg\", \"/mission_manager/MissionNameMsg\");\n    const missionManagerServiceCall = useROSService<any>(missionListCallback, \"/mission_executor/list_missions\", \"ListMissions\")\n\n    // Selection d une missions dans le select.\n    const behaviorSelected = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setCurrentMissionName(event.target.value as string);\n    }\n\n    // Publish du nom de la mission.\n    const loadMission = () => {\n        var toPublish = new ROSLIB.Message({name: currentMissionName});\n        missionNameMsgPublisher(toPublish);\n    }\n\n    // Appel du service pour update la liste de missions.\n    const updateMissionList = async () => {\n        missionManagerServiceCall({}); \n    }\n\n    return (\n        <GeneralContext.Consumer>\n            {context => context && (\n                <div style={{ width: '100%', height: '100%', flexDirection: 'row', textAlign: 'center' }}>\n                    <h1 style={{ fontSize: '20px', textAlign: 'center' }}>Mission Manager</h1>            \n                    <FormControl>\n                        <InputLabel id=\"select-outlined-label\">Mission</InputLabel>\n                        <Select\n                        labelId=\"select-outlined-label\"\n                        id=\"select-outlined\"\n                        label=\"Mission\"\n                        style={{ backgroundColor: 'white' }}\n                        handlerChange={behaviorSelected}\n                        value={currentMissionName ? currentMissionName : \"None\"}\n                        listValue={allMissions}\n                        >\n                    </Select>\n                    </FormControl>\n                    <h1 style={{ fontSize: '20px', textAlign: 'center' }}>Update List</h1>\n                    <Button style={{ fontSize: '20px', alignSelf: 'center' }} handler={updateMissionList} label=\"Update\"/>\n                    <h1 style={{ fontSize: '20px', textAlign: 'center' }}>Load Mission</h1>\n                    <Button disabled={allMissions.length === 0} style={{ fontSize: '20px', alignSelf: 'center' }} handler={loadMission} label=\"Send\"/>\n                </div>\n            )}\n        </GeneralContext.Consumer>\n    );\n};\n\nexport default MissionManager;\n"]},"metadata":{},"sourceType":"module"}