{"ast":null,"code":"import * as elements from '../elements.js';\nvar GUAGE_FOREGROUND = \"#FFFFFF\";\nvar GUAGE_BACKGROUND = \"#191921\";\nexport function AltimeterTicker(ctx, location, data) {\n  this.ctx = ctx;\n  this.data = data;\n  this.loc = location;\n\n  this.update = function (data) {\n    this.data = data;\n  };\n\n  this.draw = function () {\n    this.drawAltitimeterDigits(this.data.altitude);\n  };\n\n  this.drawAltitimeterDigits = function (altitude) {\n    var x = this.loc.x;\n    var y = this.loc.y;\n    var wid = this.loc.width;\n    var hei = this.loc.height;\n    var arrowSize = 15;\n    var ctx = this.ctx;\n    ctx.fillStyle = GUAGE_BACKGROUND;\n    ctx.strokeStyle = GUAGE_FOREGROUND;\n    ctx.beginPath();\n    ctx.moveTo(x, y);\n    ctx.lineTo(x + wid - arrowSize, y);\n    ctx.lineTo(x + wid, y + hei / 2);\n    ctx.lineTo(x + wid - arrowSize, y + hei);\n    ctx.lineTo(x, y + hei);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.fill(); // Data to print\n\n    var tensList = [];\n    var i = 0;\n\n    for (i = 0; i < 10; i++) {\n      tensList[i] = i + \"0\";\n    }\n\n    var onesList = [];\n\n    for (i = 0; i < 10; i++) {\n      onesList[i] = i + \"\";\n    }\n\n    if (altitude < 0) {\n      altitude = -altitude;\n    }\n\n    altitude = Math.round(altitude * 10) / 10;\n    var tens = altitude * 10 - Math.trunc(altitude) * 10;\n    var hundreds = Math.trunc(altitude); // Draw tens digit place\n\n    var loc = {};\n    var boxWidth = wid - arrowSize;\n    loc.x = x + boxWidth * (3 / 4);\n    loc.y = y;\n    loc.height = hei;\n    loc.width = boxWidth / 4;\n    elements.drawTickerDigit(this.ctx, onesList, tens, 1.0, 0, loc, 42); // Draw hundreds digit place\n\n    loc.x = x + boxWidth * (2 / 4);\n    elements.drawTickerDigit(this.ctx, onesList, hundreds, 1.0, 0, loc, 42);\n    /*\n      \t\t// Draw thousands digit place\n      \t\tloc.x = x + boxWidth * (1 / 4)\n      \t\telements.drawTickerDigit(this.ctx, onesList, thousands, 0.05, 20, loc, 55);\n    \n      \t\t// Draw ten thousands digit place\n      \t\tloc.x = x\n      \t\tonesList[0] = \"\"\n      \t\telements.drawTickerDigit(this.ctx, onesList, thenThousands, 0.001, 20, loc, 55);*/\n\n    this.ctx.lineWidth = 2;\n    this.ctx.beginPath();\n    this.ctx.moveTo(x + 105, y + 52);\n    this.ctx.lineTo(x + 107, y + 52);\n    this.ctx.closePath();\n    this.ctx.stroke();\n  };\n\n  return this;\n}\n_c = AltimeterTicker;\n\nvar _c;\n\n$RefreshReg$(_c, \"AltimeterTicker\");","map":{"version":3,"sources":["/home/alexemdesgagne/octopus-telemetry/src/src/components/PFD/guages/altimeter_ticker.js"],"names":["elements","GUAGE_FOREGROUND","GUAGE_BACKGROUND","AltimeterTicker","ctx","location","data","loc","update","draw","drawAltitimeterDigits","altitude","x","y","wid","width","hei","height","arrowSize","fillStyle","strokeStyle","beginPath","moveTo","lineTo","closePath","stroke","fill","tensList","i","onesList","Math","round","tens","trunc","hundreds","boxWidth","drawTickerDigit","lineWidth"],"mappings":"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","sourcesContent":["\nimport * as elements from '../elements.js'\n\nvar GUAGE_FOREGROUND = \"#FFFFFF\";\nvar GUAGE_BACKGROUND = \"#191921\";\n\nexport function AltimeterTicker(ctx, location, data)\n{\n\tthis.ctx = ctx;\n\tthis.data = data;\n\tthis.loc = location;\n\n\tthis.update = function(data)\n\t{\n\t\tthis.data = data;\n\t}\n\n\tthis.draw = function()\n\t{\n\t\tthis.drawAltitimeterDigits(this.data.altitude);\n\t}\n\n\tthis.drawAltitimeterDigits = function(altitude)\n\t{\n\t\tvar x = this.loc.x;\n  \t\tvar y = this.loc.y;\n  \t\tvar wid = this.loc.width;\n  \t\tvar hei = this.loc.height;\n\n  \t\tvar arrowSize = 15; \n\n  \t\tvar ctx = this.ctx;\n  \t\tctx.fillStyle = GUAGE_BACKGROUND;\n \t\tctx.strokeStyle = GUAGE_FOREGROUND;\n\t\tctx.beginPath();\n\n\t\tctx.moveTo(x, y);\n\t\tctx.lineTo(x + wid - arrowSize, y);\n\t\tctx.lineTo(x + wid, y + hei / 2);\n\t\tctx.lineTo(x + wid - arrowSize, y + hei);\n\t\tctx.lineTo(x, y + hei);\n\t\tctx.closePath();\n\t\tctx.stroke();\n\t\tctx.fill();\n  \t\n  \t\t// Data to print\n\t  \tvar tensList = []\n\t\tvar i = 0\n\t  \tfor (i = 0; i < 10; i++)\n\t  \t{\n\t  \t\ttensList[i] = i + \"0\"\n\t  \t}\n\n\t  \tvar onesList = []\n\t  \tfor (i = 0; i < 10; i++)\n\t  \t{\n\t  \t\tonesList[i] = i + \"\"\n\t  \t}  \n\n\t  \tif (altitude < 0)\n\t  \t{\n\t  \t\taltitude = -altitude;\n\t  \t}\n\n\t\taltitude = Math.round(altitude * 10) / 10\n\n  \t\tvar tens = altitude*10-Math.trunc(altitude)*10\n  \t\tvar hundreds = Math.trunc(altitude)\n\n\t  \t// Draw tens digit place\n  \t\tvar loc = {}\n  \t\tvar boxWidth = (wid - arrowSize)\n  \t\tloc.x = x + boxWidth * (3 / 4)\n  \t\tloc.y = y\n  \t\tloc.height = hei\n  \t\tloc.width = boxWidth / 4\n  \t\telements.drawTickerDigit(this.ctx, onesList, tens, 1.0, 0, loc, 42);\n\n  \t\t// Draw hundreds digit place\n  \t\tloc.x = x + boxWidth * (2 / 4)\n  \t\telements.drawTickerDigit(this.ctx, onesList, hundreds, 1.0, 0, loc, 42);\n/*\n  \t\t// Draw thousands digit place\n  \t\tloc.x = x + boxWidth * (1 / 4)\n  \t\telements.drawTickerDigit(this.ctx, onesList, thousands, 0.05, 20, loc, 55);\n\n  \t\t// Draw ten thousands digit place\n  \t\tloc.x = x\n  \t\tonesList[0] = \"\"\n  \t\telements.drawTickerDigit(this.ctx, onesList, thenThousands, 0.001, 20, loc, 55);*/\n\n\t\tthis.ctx.lineWidth = 2;\n\t\tthis.ctx.beginPath();\n\t\tthis.ctx.moveTo(x+105, y+52);\n\t\tthis.ctx.lineTo(x+107, y+52);\n\t\tthis.ctx.closePath();\n\t\tthis.ctx.stroke();\n\t}\n\treturn this;\n}"]},"metadata":{},"sourceType":"module"}