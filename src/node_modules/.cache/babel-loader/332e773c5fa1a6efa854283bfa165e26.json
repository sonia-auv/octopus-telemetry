{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useContext } from \"react\";\nimport ROSLIB from \"roslib\";\nimport { RosContext } from \"../context/rosContext\";\nexport const useROSService = (callback, name, serviceType) => {\n  _s();\n\n  const ros = useContext(RosContext);\n  const [service, setService] = useState(null);\n  useEffect(() => {\n    setService(new ROSLIB.Service({\n      ros,\n      name,\n      serviceType\n    }));\n  }, [ros]);\n  return x => {\n    if (service) {\n      service.callService(x, y => callback(y));\n    }\n  };\n};\n\n_s(useROSService, \"Nn+rbXS8Am0fgCWTf/+zM6iOv20=\");\n\nexport function ServiceRequestFactory(x) {\n  return new ROSLIB.ServiceRequest(x);\n}\n_c = ServiceRequestFactory;\n;\nexport function TopicFactory(x) {\n  return new ROSLIB.Topic(x);\n}\n_c2 = TopicFactory;\n;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ServiceRequestFactory\");\n$RefreshReg$(_c2, \"TopicFactory\");","map":{"version":3,"sources":["/home/alexemdesgagne/octopus-telemetry/src/src/hooks/useROSService.ts"],"names":["useState","useEffect","useContext","ROSLIB","RosContext","useROSService","callback","name","serviceType","ros","service","setService","Service","x","callService","y","ServiceRequestFactory","ServiceRequest","TopicFactory","Topic"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,QAAgD,OAAhD;AACA,OAAOC,MAAP,MAA8B,QAA9B;AACA,SAASC,UAAT,QAA2B,uBAA3B;AAEA,OAAO,MAAMC,aAAa,GAAG,CACzBC,QADyB,EAEzBC,IAFyB,EAGzBC,WAHyB,KAIxB;AAAA;;AACD,QAAMC,GAAG,GAAGP,UAAU,CAACE,UAAD,CAAtB;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAuB,IAAvB,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,UAAU,CACN,IAAIR,MAAM,CAACS,OAAX,CAAmB;AACfH,MAAAA,GADe;AAEfF,MAAAA,IAFe;AAGfC,MAAAA;AAHe,KAAnB,CADM,CAAV;AAOH,GARQ,EAQN,CAACC,GAAD,CARM,CAAT;AAUA,SAAQI,CAAD,IAA8B;AACjC,QAAIH,OAAJ,EAAa;AACTA,MAAAA,OAAO,CAACI,WAAR,CAAoBD,CAApB,EAAwBE,CAAD,IAAOT,QAAQ,CAACS,CAAD,CAAtC;AACH;AACJ,GAJD;AAKH,CAvBM;;GAAMV,a;;AAyBb,OAAO,SAASW,qBAAT,CAA+BH,CAA/B,EAA6D;AAAE,SAAO,IAAIV,MAAM,CAACc,cAAX,CAA0BJ,CAA1B,CAAP;AAAqC;KAA3FG,qB;AAA2F;AAC3G,OAAO,SAASE,YAAT,CAAsBL,CAAtB,EAA2C;AAAE,SAAO,IAAIV,MAAM,CAACgB,KAAX,CAAiBN,CAAjB,CAAP;AAA4B;MAAhEK,Y;AAAgE","sourcesContent":["import { useState, useEffect, useContext } from \"react\";\nimport ROSLIB, { Topic } from \"roslib\";\nimport { RosContext } from \"../context/rosContext\";\n\nexport const useROSService = <F>(\n    callback: (m: F) => void,\n    name: string,\n    serviceType: string\n) => {\n    const ros = useContext(RosContext);\n    const [service, setService] = useState<ROSLIB.Service| null>(null);\n\n    useEffect(() => {\n        setService(\n            new ROSLIB.Service({\n                ros,\n                name,\n                serviceType,\n            })\n        );\n    }, [ros]);\n\n    return (x: ROSLIB.ServiceRequest) => {\n        if (service) {\n            service.callService(x, (y) => callback(y as F));\n        }\n    }\n};\n\nexport function ServiceRequestFactory(x: any):ROSLIB.ServiceRequest { return new ROSLIB.ServiceRequest(x) };\nexport function TopicFactory(x: any):ROSLIB.Topic { return new ROSLIB.Topic(x) };\nexport type { Topic };"]},"metadata":{},"sourceType":"module"}