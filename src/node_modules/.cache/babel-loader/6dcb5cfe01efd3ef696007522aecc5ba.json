{"ast":null,"code":"var _jsxFileName = \"/home/alexemdesgagne/octopus-telemetry/src/src/components/Thruster.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport ThrusterControlSlider from \"./common/slider/ThrusterControlSlider\";\nimport ThrusterEffortIndicatorSlider from \"./common/slider/ThrusterEffortIndicatorSlider\";\nimport Grid from './common/grid/Grid';\nimport RedButtonImg from './image/redButton.png';\nimport { useROSTopicPublisher, MessageFactory } from '../hooks/useROSTopicPublisher';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst marks = [{\n  value: -75,\n  label: '-75%'\n}, {\n  value: -25,\n  label: '-25%'\n}, {\n  value: 25,\n  label: '25%'\n}, {\n  value: 75,\n  label: '75%'\n}];\nconst marksIndicator = [{\n  value: -100,\n  label: '-100%'\n}, {\n  value: -50,\n  label: '-50%'\n}, {\n  value: 0,\n  label: '0%'\n}, {\n  value: 50,\n  label: '50%'\n}, {\n  value: 100,\n  label: '100%'\n}];\nexport const Thruster = ({\n  identification,\n  effort,\n  minMark,\n  maxMark,\n  step,\n  thumbEnabled\n}) => {\n  _s();\n\n  const thrusterEffortPublisher = useROSTopicPublisher(\"/provider_thruster/thruster_effort\", \"std_msgs/String\");\n\n  function ThrusterControlThumbComponent(props) {\n    return /*#__PURE__*/_jsxDEV(\"span\", { ...props,\n      children: !thumbEnabled ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: RedButtonImg,\n        width: \"100%\",\n        height: \"100%\",\n        alt: \"thumb\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this);\n  }\n\n  function ThrusterEffortThumbComponent(props) {\n    return /*#__PURE__*/_jsxDEV(\"span\", { ...props,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"triangleLeft\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"triangleRight\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this);\n  }\n\n  const [value, setValue] = React.useState(1);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue); // TODO: Check data formating ? may be just use var toPublish = { ID: identification, effort: newValue } and no need stringify?\n\n    var msg = JSON.stringify({\n      ID: identification,\n      effort: newValue\n    });\n    var toPublish = MessageFactory({\n      data: msg\n    });\n    thrusterEffortPublisher(toPublish);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 2,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        style: {\n          height: 'calc(100% - 120px)'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            style: {\n              fontSize: '20px',\n              marginBottom: '0px',\n              marginLeft: '40px'\n            },\n            children: [\"T\", identification]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ThrusterEffortIndicatorSlider, {\n            orientation: \"vertical\",\n            value: effort,\n            min: minMark,\n            max: maxMark,\n            valueLabelDisplay: \"off\",\n            disabled: true,\n            marks: marksIndicator,\n            ThumbComponent: ThrusterEffortThumbComponent,\n            handlerChange: () => {}\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n            style: {\n              fontSize: '20px',\n              marginTop: '-10px',\n              marginLeft: '40px'\n            },\n            children: [effort, \" %\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 25\n          }, this)]\n        }, 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            style: {\n              fontSize: '20px',\n              marginBottom: '0px',\n              marginLeft: '-104px'\n            },\n            children: [\"T\", identification]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ThrusterControlSlider, {\n            orientation: \"vertical\",\n            value: value,\n            min: minMark,\n            max: maxMark,\n            valueLabelDisplay: \"off\",\n            marks: marks,\n            disabled: !thumbEnabled,\n            ThumbComponent: ThrusterControlThumbComponent,\n            defaultValue: 0,\n            handlerChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n            style: {\n              fontSize: '20px',\n              marginTop: '-10px',\n              marginLeft: '-104px'\n            },\n            children: [effort, \" %\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 25\n          }, this)]\n        }, 1, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Thruster, \"TQMIduZRtiZ/EQiG8XSGL2JFAyQ=\", false, function () {\n  return [useROSTopicPublisher];\n});\n\n_c = Thruster;\nexport default Thruster;\n\nvar _c;\n\n$RefreshReg$(_c, \"Thruster\");","map":{"version":3,"sources":["/home/alexemdesgagne/octopus-telemetry/src/src/components/Thruster.tsx"],"names":["React","ThrusterControlSlider","ThrusterEffortIndicatorSlider","Grid","RedButtonImg","useROSTopicPublisher","MessageFactory","marks","value","label","marksIndicator","Thruster","identification","effort","minMark","maxMark","step","thumbEnabled","thrusterEffortPublisher","ThrusterControlThumbComponent","props","ThrusterEffortThumbComponent","setValue","useState","handleChange","event","newValue","msg","JSON","stringify","ID","toPublish","data","height","fontSize","marginBottom","marginLeft","marginTop"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport ThrusterControlSlider from \"./common/slider/ThrusterControlSlider\";\nimport ThrusterEffortIndicatorSlider from \"./common/slider/ThrusterEffortIndicatorSlider\";\nimport Grid from './common/grid/Grid';\nimport RedButtonImg from './image/redButton.png';\n\nimport { useROSTopicPublisher, MessageFactory } from '../hooks/useROSTopicPublisher'\n\nconst marks = [\n    {\n        value: -75,\n        label: '-75%',\n    },\n    {\n        value: -25,\n        label: '-25%',\n    },\n    {\n        value: 25,\n        label: '25%',\n    },\n    {\n        value: 75,\n        label: '75%',\n    }]\n\nconst marksIndicator = [\n    {\n        value: -100,\n        label: '-100%',\n    },\n    {\n        value: -50,\n        label: '-50%',\n    },\n    {\n        value: 0,\n        label: '0%',\n    },\n    {\n        value: 50,\n        label: '50%',\n    },\n    {\n        value: 100,\n        label: '100%',\n    }]\n\n\ntype ThrusterLevel = {\n    identification: number\n    effort: number,\n    minMark: number,\n    maxMark: number,\n    step: number,\n    thumbEnabled: boolean\n}\n\nexport const Thruster = ({ identification, effort, minMark, maxMark, step, thumbEnabled }: ThrusterLevel) => {\n\n    const thrusterEffortPublisher = useROSTopicPublisher<any>(\"/provider_thruster/thruster_effort\", \"std_msgs/String\")\n\n    function ThrusterControlThumbComponent(props: any) {\n        return (\n            <span {...props}>\n                {!thumbEnabled ?\n                    <img src={RedButtonImg} width=\"100%\" height=\"100%\" alt=\"thumb\" /> : null\n                }\n            </span>\n        );\n    }\n\n    function ThrusterEffortThumbComponent(props: any) {\n        return (\n            <span {...props}>\n                <span className=\"triangleLeft\" />\n                <span className=\"triangleRight\" />\n            </span>\n        );\n    }\n\n    const [value, setValue] = React.useState(1);\n\n    const handleChange = (event: any, newValue: any) => {\n        \n        setValue(newValue);\n\n        // TODO: Check data formating ? may be just use var toPublish = { ID: identification, effort: newValue } and no need stringify?\n        var msg = JSON.stringify({ ID: identification, effort: newValue })\n        var toPublish = MessageFactory({\n            data: msg\n        })\n        thrusterEffortPublisher(toPublish)\n    };\n\n    return (\n        <Grid container spacing={2}>\n            <Grid item xs={12}>\n                <Grid container style={{ height: 'calc(100% - 120px)' }}>\n                    <Grid key={0} item >\n                        <h1 style={{ fontSize: '20px', marginBottom: '0px', marginLeft: '40px' }}>T{identification}</h1>\n                        <ThrusterEffortIndicatorSlider\n                            orientation=\"vertical\"\n                            value={effort}\n                            min={minMark}\n                            max={maxMark}\n                            valueLabelDisplay=\"off\"\n                            disabled={true}\n                            marks={marksIndicator}\n                            ThumbComponent={ThrusterEffortThumbComponent}\n                            handlerChange={() => { }}\n                        />\n                        <h1 style={{ fontSize: '20px', marginTop: '-10px', marginLeft: '40px' }}>{effort} %</h1>\n                    </Grid>\n                    <Grid key={1} item>\n                        <h1 style={{ fontSize: '20px', marginBottom: '0px', marginLeft: '-104px' }}>T{identification}</h1>\n                        <ThrusterControlSlider\n                            orientation=\"vertical\"\n                            value={value}\n                            min={minMark}\n                            max={maxMark}\n                            valueLabelDisplay=\"off\"\n                            marks={marks}\n                            disabled={!thumbEnabled}\n                            ThumbComponent={ThrusterControlThumbComponent}\n                            defaultValue={0}\n                            handlerChange={handleChange}\n                        />\n                        <h1 style={{ fontSize: '20px', marginTop: '-10px', marginLeft: '-104px' }}>{effort} %</h1>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Grid>\n    )\n\n}\n\nexport default Thruster"]},"metadata":{},"sourceType":"module"}