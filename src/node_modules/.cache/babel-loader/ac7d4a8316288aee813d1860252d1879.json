{"ast":null,"code":"var _jsxFileName = \"/home/alexemdesgagne/octopus-telemetry/src/src/components/ActuatorModule.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useContext } from 'react';\nimport Switch from './common/switch/Switch';\nimport Button from './common/button/Button';\nimport { GeneralContext } from \"../context/generalContext\";\nimport { useROSService, ServiceRequestFactory } from '../hooks/useROSService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ActuatorModule = () => {\n  _s();\n\n  // Service response\n  const actuactorServiceCallback = useCallback(x => {}, []);\n  const context = useContext(GeneralContext);\n  const actuactorServiceCall = useROSService(actuactorServiceCallback, \"/provider_actuators/do_action_srv\", \"sonia_common/ActuatorDoActionSrv\");\n\n  const HandleChangeSwitch = value => {\n    context.setIsRoboticArmClosed(!context.isRoboticArmClosed);\n    var request = ServiceRequestFactory({\n      element: 2,\n      side: !value,\n      action: 1\n    });\n    actuactorServiceCall(request);\n  };\n\n  const handleChangeButtonTorpedo = () => {\n    var request = ServiceRequestFactory({\n      element: 0,\n      side: 0,\n      action: 1\n    });\n    actuactorServiceCall(request);\n  };\n\n  const handleChangeButtonDropObject = () => {\n    var request = ServiceRequestFactory({\n      element: 1,\n      side: 0,\n      action: 1\n    });\n    actuactorServiceCall(request);\n  };\n\n  return /*#__PURE__*/_jsxDEV(GeneralContext.Consumer, {\n    children: context => context && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '100%',\n        height: '100%',\n        flexDirection: 'row',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          fontSize: '20px',\n          textAlign: 'center'\n        },\n        children: \"ROBOTIC ARM\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {\n        onLabel: \"Open\",\n        offLabel: \"Closed\",\n        vertical: false,\n        value: !context.isRoboticArmClosed,\n        handler: HandleChangeSwitch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          fontSize: '20px',\n          textAlign: 'center'\n        },\n        children: \"TORPEDO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          fontSize: '20px',\n          alignSelf: 'center'\n        },\n        handler: handleChangeButtonTorpedo,\n        label: \"Launch\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          fontSize: '20px',\n          textAlign: 'center'\n        },\n        children: \"DROP OBJECT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          fontSize: '20px',\n          alignSelf: 'center'\n        },\n        handler: handleChangeButtonDropObject,\n        label: \"Drop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ActuatorModule, \"IeAUmA3WLfD38tzbvc6wRl+BO+I=\", false, function () {\n  return [useROSService];\n});\n\n_c = ActuatorModule;\nexport default ActuatorModule;\n\nvar _c;\n\n$RefreshReg$(_c, \"ActuatorModule\");","map":{"version":3,"sources":["/home/alexemdesgagne/octopus-telemetry/src/src/components/ActuatorModule.tsx"],"names":["useCallback","useContext","Switch","Button","GeneralContext","useROSService","ServiceRequestFactory","ActuatorModule","actuactorServiceCallback","x","context","actuactorServiceCall","HandleChangeSwitch","value","setIsRoboticArmClosed","isRoboticArmClosed","request","element","side","action","handleChangeButtonTorpedo","handleChangeButtonDropObject","width","height","flexDirection","textAlign","fontSize","alignSelf"],"mappings":"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","sourcesContent":["import { useCallback, useContext } from 'react';\n\nimport Switch from './common/switch/Switch';\nimport Button from './common/button/Button';\n\nimport { GeneralContext } from \"../context/generalContext\";\n\nimport { useROSService, ServiceRequestFactory } from '../hooks/useROSService'\n\nconst ActuatorModule = () => {\n\n    // Service response\n    const actuactorServiceCallback = useCallback(\n        (x: any) => {\n        }, []\n    )\n\n    const context = useContext(GeneralContext)\n    const actuactorServiceCall = useROSService<any>(actuactorServiceCallback, \"/provider_actuators/do_action_srv\", \"sonia_common/ActuatorDoActionSrv\")\n\n    const HandleChangeSwitch = (value: any) => {\n\n        context.setIsRoboticArmClosed(!context.isRoboticArmClosed)\n        var request = ServiceRequestFactory({\n            element: 2,\n            side: !value,\n            action: 1\n        });\n        actuactorServiceCall(request)\n    }\n\n    const handleChangeButtonTorpedo = () => {\n        var request = ServiceRequestFactory({\n            element: 0,\n            side: 0,\n            action: 1\n        });\n        actuactorServiceCall(request)\n    }\n\n    const handleChangeButtonDropObject = () => {\n        var request = ServiceRequestFactory({\n            element: 1,\n            side: 0,\n            action: 1\n        });\n        actuactorServiceCall(request)\n    }\n\n    return (\n        <GeneralContext.Consumer>\n            {context => context && (\n                <div style={{ width: '100%', height: '100%', flexDirection: 'row', textAlign: 'center' }}>\n                    <h1 style={{ fontSize: '20px', textAlign: 'center' }}>ROBOTIC ARM</h1>\n                    <Switch onLabel=\"Open\"\n                        offLabel=\"Closed\"\n                        vertical={false}\n                        value={!context.isRoboticArmClosed}\n                        handler={HandleChangeSwitch} />\n                    <h1 style={{ fontSize: '20px', textAlign: 'center' }}>TORPEDO</h1>\n                    <Button style={{ fontSize: '20px', alignSelf: 'center' }} handler={handleChangeButtonTorpedo} label=\"Launch\" />\n                    <h1 style={{ fontSize: '20px', textAlign: 'center' }}>DROP OBJECT</h1>\n                    <Button style={{ fontSize: '20px', alignSelf: 'center' }} handler={handleChangeButtonDropObject} label=\"Drop\" />\n                </div>\n            )}\n        </GeneralContext.Consumer>\n    );\n};\n\nexport default ActuatorModule;"]},"metadata":{},"sourceType":"module"}