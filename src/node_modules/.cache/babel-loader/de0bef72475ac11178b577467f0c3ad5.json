{"ast":null,"code":"var _jsxFileName = \"/home/alexemdesgagne/octopus-telemetry/src/src/components/VisionUiFilter.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useCallback, useRef, useEffect } from 'react';\nimport TextField from './common/textfield/Textfield';\nimport Select from './common/select/Select';\nimport FormControl from './common/Form/FormControl';\nimport InputLabel from './common/Input/InputLabel';\nimport Button from './common/button/Button';\nimport ListItemText from './common/List/ListItemText';\nimport List from './common/List/List';\nimport ListItem from './common/List/ListItem';\nimport Checkbox from './common/Checkbox/Checkbox';\nimport FormControlLabel from './common/Form/FormControlLabel';\nimport Tooltip from './common/Tooltip/Tooltip';\nimport { MAddCircleOutlineIcon as AddCircleOutlineIcon } from './common/Icons/Icon';\nimport { MArrowDropUpIcon as ArrowDropUpIcon } from './common/Icons/Icon';\nimport { MArrowDropDownIcon as ArrowDropDownIcon } from './common/Icons/Icon';\nimport { MDeleteIcon as DeleteIcon } from './common/Icons/Icon';\nimport { MSaveIcon as SaveIcon } from './common/Icons/Icon';\nimport { MRestoreIcon as RestoreIcon } from './common/Icons/Icon';\nimport { MCachedIcon as CachedIcon } from './common/Icons/Icon';\nimport { useROSService, ServiceRequestFactory } from '../hooks/useROSService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst VisionUIFilterModule = () => {\n  _s();\n\n  const [executionList, setExecutionList] = useState([]);\n  const [executionSelected, setExecutionSelected] = useState('');\n  const [executionMedia, setExecutionMedia] = useState('');\n  const executionSelectedRef = useRef('');\n  const [executionFilterChain, setExecutionFilterChain] = useState('');\n  const [filterSelected, setFilterSelected] = useState(null);\n  const [filterList, setFilterList] = useState([]);\n  const [filterListItems, setFilterListItems] = useState([]);\n  const [executionFilterSelected, setExecutionFilterSelected] = useState('');\n  const [parameterList, setParameterList] = useState([]);\n  const [currentParamFocus, setCurrentParamFocus] = useState(0);\n  const [currentSubParamFocus, setCurrentSubParamFocus] = useState(0);\n  const [executionFilterAutoSelect, setExecutionFilterAutoSelect] = useState(0);\n  const getExecutionFilterChainListServiceCallback = useCallback(x => {\n    var receivedList = x.list;\n    var tab = [];\n    receivedList.split(';').forEach((v, index) => {\n      tab.push({\n        id: index,\n        value: v\n      });\n    });\n    setFilterListItems(tab);\n  }, []); // Auto-select after clicked up/down on filter\n\n  useEffect(() => {\n    var autoselectitem = \"\";\n    filterListItems.forEach((item, i) => {\n      if (i === executionFilterAutoSelect) {\n        autoselectitem = item[\"value\"];\n      }\n    });\n    setExecutionFilterSelected(autoselectitem);\n  }, [filterListItems]);\n  const getExecutionFilterChainListServiceCall = useROSService(getExecutionFilterChainListServiceCallback, \"/proc_image_processing/get_filterchain_filter\", \"sonia_common/GetFilterchainFilter\");\n  const getFilterChainFromExecutionCallback = useCallback(x => {\n    var executionFilterChain = x.list;\n    setExecutionFilterChain(executionFilterChain);\n  }, []); // After we get execution filter chain we can get the list of filter \n\n  useEffect(() => {\n    // Get all filter for this execution\n    var request = ServiceRequestFactory({\n      exec_name: executionSelectedRef.current,\n      filterchain: executionFilterChain\n    });\n    getExecutionFilterChainListServiceCall(request);\n  }, [executionFilterChain]);\n  const getMediaFromExecutionCallback = useCallback(x => {\n    var media = x.list;\n    setExecutionMedia(media);\n  }, []);\n  const getFilterChainFromExecutionServiceCall = useROSService(getFilterChainFromExecutionCallback, \"/proc_image_processing/get_media_from_execution\", \"sonia_common/GetMediaFromExecution\");\n  const getMediaFromExecutionServiceCall = useROSService(getMediaFromExecutionCallback, \"/proc_image_processing/get_media_from_execution\", \"sonia_common/GetMediaFromExecution\"); // Clear lists if no execution selected\n\n  useEffect(() => {\n    if (executionSelected === \"None\") {\n      setFilterListItems([]);\n      setParameterList([]);\n    }\n  }, [executionSelected, executionList]);\n\n  const handleChangeExecution = x => {\n    setExecutionSelected(x.target.value);\n    executionSelectedRef.current = x.target.value; //Get media from execution\n\n    var request = ServiceRequestFactory({\n      exec_name: x.target.value\n    });\n    getMediaFromExecutionServiceCall(request); // Get filter chain from execution\n\n    var request2 = ServiceRequestFactory({\n      exec_name: x.target.value\n    });\n    getFilterChainFromExecutionServiceCall(request2);\n  };\n\n  const fillExecutionListServiceCallback = useCallback(x => {\n    var receivedList = x.list;\n    var tab = [];\n    receivedList.split(';').forEach((v, index) => {\n      tab.push({\n        id: index,\n        value: v\n      });\n    });\n    setExecutionList(tab);\n  }, []);\n  const fillExecutionListServiceCall = useROSService(fillExecutionListServiceCallback, \"/proc_image_processing/get_information_list\", \"sonia_common/GetInformationList\");\n\n  const handleRefreshExecutionList = x => {\n    var request = ServiceRequestFactory({\n      cmd: 1\n    });\n    fillExecutionListServiceCall(request);\n  };\n\n  const deleteExecutionServiceCallback = useCallback(x => {}, []);\n  const deleteExecutionServiceCall = useROSService(deleteExecutionServiceCallback, \"/proc_image_processing/execute_cmd\", \"sonia_common/ExecuteCmd\");\n\n  const handleClickDeleteExecution = value => {\n    setFilterListItems([]);\n    setParameterList([]);\n\n    if (executionSelected !== '' && executionMedia !== '' && executionFilterChain !== '') {\n      var request = ServiceRequestFactory({\n        node_name: executionSelected,\n        filterchain_name: executionFilterChain,\n        media_name: executionMedia,\n        cmd: 2\n      });\n      deleteExecutionServiceCall(request);\n      setExecutionMedia('');\n      setExecutionFilterChain('');\n      setExecutionSelected(''); // Refresh execution list after delete\n\n      setTimeout(() => {\n        var request = ServiceRequestFactory({\n          cmd: 1\n        });\n        fillExecutionListServiceCall(request);\n      }, 500);\n    }\n  };\n\n  const getAllFilterChainListServiceCallback = useCallback(x => {\n    var receivedList = x.list;\n    var tab = [];\n    receivedList.split(';').forEach((v, index) => {\n      tab.push({\n        id: index,\n        value: v\n      });\n    });\n    setFilterList(tab);\n  }, []);\n  const getAllFilterChainListServiceCall = useROSService(getAllFilterChainListServiceCallback, \"/proc_image_processing/get_information_list\", \"sonia_common/GetInformationList\");\n\n  const handleRefreshFilterList = () => {\n    var request = ServiceRequestFactory({\n      cmd: 4\n    });\n    getAllFilterChainListServiceCall(request);\n  };\n\n  const handleChangeFilter = x => {\n    setFilterSelected(x.target.value);\n  };\n\n  const addDeleteFilterServiceCallback = useCallback(x => {}, []);\n  const addDeleteFilterServiceCall = useROSService(addDeleteFilterServiceCallback, \"/proc_image_processing/manage_filterchain_filter\", \"sonia_common/ManageFilterchain\");\n\n  const handleClickAdd = () => {\n    setCurrentParamFocus(-1);\n\n    if (executionSelected !== '' && executionFilterChain !== '' && filterSelected !== '') {\n      var request = ServiceRequestFactory({\n        exec_name: executionSelected,\n        filterchain: executionFilterChain,\n        filter: filterSelected,\n        cmd: 1\n      });\n      addDeleteFilterServiceCall(request);\n      setTimeout(() => {\n        //Update filter list\n        var request2 = ServiceRequestFactory({\n          exec_name: executionSelected,\n          filterchain: executionFilterChain\n        });\n        getExecutionFilterChainListServiceCall(request2);\n      }, 500);\n    }\n  };\n\n  const handleClickDelete = () => {\n    setCurrentParamFocus(-1);\n\n    if (executionSelected !== '' && executionFilterChain !== '' && executionFilterSelected !== '') {\n      var request = ServiceRequestFactory({\n        exec_name: executionSelected,\n        filterchain: executionFilterChain,\n        filter: executionFilterSelected,\n        cmd: 2\n      });\n      addDeleteFilterServiceCall(request);\n      setTimeout(() => {\n        //Update filter list\n        var request2 = ServiceRequestFactory({\n          exec_name: executionSelected,\n          filterchain: executionFilterChain\n        });\n        getExecutionFilterChainListServiceCall(request2);\n      }, 500);\n    }\n  };\n\n  const saveFilterServiceCallback = useCallback(x => {}, []);\n  const saveFilterServiceCall = useROSService(saveFilterServiceCallback, \"/proc_image_processing/save_filterchain\", \"sonia_common/SaveFilterchain\");\n\n  const handleClickSave = () => {\n    setCurrentParamFocus(-1);\n\n    if (executionSelected !== '' && executionFilterChain !== '') {\n      var request = ServiceRequestFactory({\n        exec_name: executionSelected,\n        filterchain: executionFilterChain,\n        cmd: 1\n      });\n      saveFilterServiceCall(request);\n    }\n  };\n\n  const handleClickRestore = () => {\n    setCurrentParamFocus(-1);\n\n    if (executionSelected !== '' && executionFilterChain !== '') {\n      var request = ServiceRequestFactory({\n        exec_name: executionSelected,\n        filterchain: executionFilterChain,\n        cmd: 2\n      });\n      saveFilterServiceCall(request);\n      setTimeout(() => {\n        //Update filter list\n        var request2 = ServiceRequestFactory({\n          exec_name: executionSelected,\n          filterchain: executionFilterChain\n        });\n        getExecutionFilterChainListServiceCall(request2);\n      }, 500);\n    }\n  };\n\n  const orderFilterServiceCallback = useCallback(x => {}, []);\n  const orderFilterServiceCall = useROSService(orderFilterServiceCallback, \"/proc_image_processing/set_filterchain_filter_order\", \"sonia_common/SetFilterchainFilterOrder\");\n\n  const handleClickUp = () => {\n    setCurrentParamFocus(-1);\n\n    if (executionSelected !== '' && executionFilterChain !== '' && executionFilterSelected !== '') {\n      var index = -1;\n      filterListItems.forEach((item, i) => {\n        if (item['value'] === executionFilterSelected) {\n          index = item['id'];\n        }\n      });\n\n      if (index !== -1) {\n        setExecutionFilterAutoSelect(index - 1);\n        var request = ServiceRequestFactory({\n          exec_name: executionSelected,\n          filterchain: executionFilterChain,\n          filter_index: index,\n          cmd: 1\n        });\n        orderFilterServiceCall(request);\n        setTimeout(() => {\n          //Update filter list\n          var request2 = ServiceRequestFactory({\n            exec_name: executionSelected,\n            filterchain: executionFilterChain\n          });\n          getExecutionFilterChainListServiceCall(request2);\n        }, 500);\n      }\n    }\n  };\n\n  const handleClickDown = () => {\n    setCurrentParamFocus(-1);\n\n    if (executionSelected !== '' && executionFilterChain !== '' && executionFilterSelected !== '') {\n      var index = -1;\n      filterListItems.forEach((item, i) => {\n        if (item['value'] === executionFilterSelected) index = item['id'];\n      });\n\n      if (index !== -1) {\n        setExecutionFilterAutoSelect(index + 1);\n        var request = ServiceRequestFactory({\n          exec_name: executionSelected,\n          filterchain: executionFilterChain,\n          filter_index: index,\n          cmd: 2\n        });\n        orderFilterServiceCall(request);\n        setTimeout(() => {\n          //Update filter list\n          var request2 = ServiceRequestFactory({\n            exec_name: executionSelected,\n            filterchain: executionFilterChain\n          });\n          getExecutionFilterChainListServiceCall(request2);\n        }, 500);\n      }\n    }\n  };\n\n  const filterChainFilterObserverServiceCallback = useCallback(x => {}, []);\n  const filterChainFilterAllParamServiceCallback = useCallback(x => {\n    var receivedList = x.list;\n    var tab = [];\n    receivedList.split(';').forEach((v, index) => {\n      var obj = {\n        \"paramName\": \"\",\n        \"type\": \"\",\n        \"value\": \"\",\n        \"min\": \"\",\n        \"max\": \"\",\n        \"desc\": \"\"\n      };\n      v.split('|').forEach((subv, subindex) => {\n        if (subindex === 0) obj.paramName = subv;\n        if (subindex === 1) obj.type = subv;\n        if (subindex === 2) obj.value = obj.type === \"Double\" ? parseFloat(subv).toFixed(2) : subv;\n        if (subindex === 3) obj.min = obj.type === \"Double\" ? parseFloat(subv).toFixed(2) : subv;\n        if (subindex === 4) obj.max = obj.type === \"Double\" ? parseFloat(subv).toFixed(2) : subv;\n        if (subindex === 5) obj.desc = subv;\n      });\n      tab.push(obj);\n    });\n    setParameterList(tab);\n  }, []);\n  const filterChainFilterObserverServiceCall = useROSService(filterChainFilterObserverServiceCallback, \"/proc_image_processing/set_filterchain_filter_observer\", \"sonia_common/SetFilterchainFilterObserver\");\n  const filterChainFilterAllParamServiceCall = useROSService(filterChainFilterAllParamServiceCallback, \"/proc_image_processing/get_filterchain_filter_all_param\", \"sonia_common/GetFilterchainFilterAllParam\");\n\n  const handSelectedExecutionFilterChain = (event, value) => {\n    setExecutionFilterSelected(value); // When selection changed send information about what filter currently observed and get parameters for this filter\n\n    var request = ServiceRequestFactory({\n      execution: executionSelected,\n      filterchain: executionFilterChain,\n      filter: value\n    });\n    filterChainFilterObserverServiceCall(request);\n    setTimeout(() => {\n      // and get parameters for this filter\n      var request2 = ServiceRequestFactory({\n        exec_name: executionSelected,\n        filterchain: executionFilterChain,\n        filter: value\n      });\n      filterChainFilterAllParamServiceCall(request2);\n    }, 500);\n  };\n\n  function FilterList(props) {\n    const {\n      index,\n      style\n    } = props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: filterListItems.map(item => /*#__PURE__*/_jsxDEV(ListItem, {\n        style: style,\n        selected: executionFilterSelected === item['value'],\n        autoFocus: executionFilterSelected === item['value'],\n        children: /*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: item['value'],\n          handler: event => handSelectedExecutionFilterChain(event, item['value'])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 25\n        }, this)\n      }, \"filterList\" + item['id'], false, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 13\n    }, this);\n  }\n\n  const checkSyntaxInteger = v => [...v].every(c => '0123456789-'.includes(c));\n\n  const checkSyntaxDouble = v => [...v].every(c => '0123456789-.'.includes(c));\n\n  const changeParameterServiceCallback = useCallback(x => {}, []);\n  const changeParameterServiceCall = useROSService(changeParameterServiceCallback, \"/proc_image_processing/set_filterchain_filter_param\", \"sonia_common/SetFilterchainFilterParam\");\n\n  const handleChangeParamValue = (event, index, arg) => {\n    setCurrentParamFocus(index);\n    var newValue = event.target.value;\n    parameterList === null || parameterList === void 0 ? void 0 : parameterList.forEach((item, i) => {\n      if (i === index) {\n        if (item['type'] === \"Boolean\") {\n          let temporaryarray = parameterList.slice();\n\n          if (item['value'] === \"0\") {\n            temporaryarray[index][\"value\"] = \"1\";\n            newValue = \"1\";\n          } else {\n            temporaryarray[index][\"value\"] = \"0\";\n            newValue = \"0\";\n          }\n\n          setParameterList(temporaryarray);\n        }\n\n        if (item['type'] === \"Integer\" || item['type'] === \"Double\") {\n          let temporaryarray = parameterList.slice();\n\n          if (arg === \"value\") {\n            if (checkSyntaxInteger(newValue) && item['type'] === \"Integer\" || checkSyntaxDouble(newValue) && item['type'] === \"Double\") temporaryarray[index][\"value\"] = newValue;\n            setCurrentSubParamFocus(1);\n          }\n\n          if (arg === \"min\") {\n            if (checkSyntaxInteger(newValue) && item['type'] === \"Integer\" || checkSyntaxDouble(newValue) && item['type'] === \"Double\") temporaryarray[index][\"min\"] = newValue;\n            setCurrentSubParamFocus(2);\n          }\n\n          if (arg === \"max\") {\n            if (checkSyntaxInteger(newValue) && item['type'] === \"Integer\" || checkSyntaxDouble(newValue) && item['type'] === \"Double\") temporaryarray[index][\"max\"] = newValue;\n            setCurrentSubParamFocus(3);\n          }\n\n          setParameterList(temporaryarray);\n        }\n\n        if (item['type'] === \"String\") {\n          let temporaryarray = parameterList.slice();\n\n          if (arg === \"value\") {\n            temporaryarray[index][\"value\"] = newValue;\n          }\n\n          setParameterList(temporaryarray);\n        } // Send ros command for notify param changed\n\n\n        if (newValue !== '' && ((item['type'] === \"Integer\" || item['type'] === \"Double\") && Number(newValue) <= Number(item['max']) && Number(newValue) >= Number(item['min']) || item['type'] !== \"Integer\" && item['type'] !== \"Double\")) {\n          if (item['type'] === \"Double\") newValue = \"\" + parseFloat(newValue);\n          var request = ServiceRequestFactory({\n            exec_name: executionSelected,\n            filterchain: executionFilterChain,\n            filter: executionFilterSelected,\n            parameter: item['paramName'],\n            value: newValue\n          });\n          changeParameterServiceCall(request);\n        }\n      }\n    });\n  };\n\n  function SettingsList(props) {\n    const {\n      index,\n      style\n    } = props;\n    let content = [];\n    parameterList === null || parameterList === void 0 ? void 0 : parameterList.forEach((item, index) => {\n      if (item['type'] === \"Boolean\") {\n        content.push( /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: item['desc'],\n          children: /*#__PURE__*/_jsxDEV(ListItem, {\n            style: style,\n            children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                name: item['paramName'],\n                color: \"primary\",\n                checked: item['value'] === '1',\n                handler: event => handleChangeParamValue(event, index, \"value\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 544,\n                columnNumber: 42\n              }, this),\n              label: item['paramName']\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 543,\n              columnNumber: 29\n            }, this)\n          }, \"paramList\" + item['paramName'], false, {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 21\n        }, this));\n      }\n\n      if (item['type'] === \"Integer\" || item['type'] === \"Double\") {\n        content.push( /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: item['desc'],\n          children: /*#__PURE__*/_jsxDEV(ListItem, {\n            style: style,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              type: item['type'] === \"Integer\" ? 'number' : \"float\",\n              autoFocus: currentParamFocus === index && currentSubParamFocus === 1,\n              value: item['value'],\n              handlerChange: event => handleChangeParamValue(event, index, \"value\"),\n              handlerKeyDown: () => {},\n              id: \"paramvalue_id\" + index,\n              label: \"Value\",\n              style: {\n                padding: '10px 10px',\n                float: \"left\",\n                width: \"120px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 557,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              disabled: true,\n              value: item['min'],\n              handlerChange: event => handleChangeParamValue(event, index, \"min\"),\n              handlerKeyDown: () => {},\n              id: \"parammin_id\" + index,\n              label: \"Min\",\n              style: {\n                padding: '10px 10px',\n                float: \"left\",\n                width: \"120px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 558,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              disabled: true,\n              value: item['max'],\n              handlerChange: event => handleChangeParamValue(event, index, \"max\"),\n              handlerKeyDown: () => {},\n              id: \"parammax_id\" + index,\n              label: \"Max\",\n              style: {\n                padding: '10px 10px',\n                float: \"left\",\n                width: \"120px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 559,\n              columnNumber: 29\n            }, this)]\n          }, \"paramList\" + item['paramName'], true, {\n            fileName: _jsxFileName,\n            lineNumber: 556,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 21\n        }, this));\n      }\n\n      if (item['type'] === \"String\") {\n        content.push( /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: item['desc'],\n          children: /*#__PURE__*/_jsxDEV(ListItem, {\n            style: style,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              autoFocus: currentParamFocus === index,\n              value: item['value'],\n              handlerChange: event => handleChangeParamValue(event, index, \"value\"),\n              handlerKeyDown: () => {},\n              id: \"paramvalue_id\" + index,\n              label: \"Value\",\n              style: {\n                padding: '10px 10px',\n                float: \"left\",\n                width: \"300px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 571,\n              columnNumber: 29\n            }, this)\n          }, \"paramList\" + item['paramName'], false, {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 21\n        }, this));\n      }\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 578,\n      columnNumber: 17\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(FormControl, {\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        id: \"execution-outlined-label\",\n        children: \"Execution\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 584,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        labelId: \"execution-outlined-label\",\n        fullWidth: true,\n        id: \"sexecution-outlined\",\n        handlerChange: handleChangeExecution,\n        label: \"Execution\",\n        value: executionSelected ? executionSelected : \"None\",\n        style: {\n          backgroundColor: 'white'\n        },\n        listValue: executionList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 583,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      label: /*#__PURE__*/_jsxDEV(CachedIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 24\n      }, this),\n      handler: handleRefreshExecutionList,\n      isIcon: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 597,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      label: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 603,\n        columnNumber: 24\n      }, this),\n      handler: handleClickDeleteExecution,\n      isIcon: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 607,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        id: \"selectFilter-outlined-label\",\n        children: \"Filter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        labelId: \"selectFilter-outlined-label\",\n        fullWidth: true,\n        id: \"selectFilter-outlined\",\n        handlerChange: handleChangeFilter,\n        label: \"Filter\",\n        value: filterSelected ? filterSelected : \"None\",\n        style: {\n          backgroundColor: 'white'\n        },\n        listValue: filterList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 608,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      label: /*#__PURE__*/_jsxDEV(CachedIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 623,\n        columnNumber: 24\n      }, this),\n      handler: handleRefreshFilterList,\n      isIcon: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 622,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 627,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      label: /*#__PURE__*/_jsxDEV(AddCircleOutlineIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 629,\n        columnNumber: 24\n      }, this),\n      handler: handleClickAdd,\n      isIcon: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 628,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      label: /*#__PURE__*/_jsxDEV(ArrowDropUpIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 634,\n        columnNumber: 24\n      }, this),\n      handler: handleClickUp,\n      isIcon: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 633,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      label: /*#__PURE__*/_jsxDEV(ArrowDropDownIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 639,\n        columnNumber: 24\n      }, this),\n      handler: handleClickDown,\n      isIcon: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 638,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      label: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 644,\n        columnNumber: 24\n      }, this),\n      handler: handleClickDelete,\n      isIcon: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 643,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      label: /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 649,\n        columnNumber: 24\n      }, this),\n      handler: handleClickSave,\n      isIcon: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 648,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      label: /*#__PURE__*/_jsxDEV(RestoreIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 654,\n        columnNumber: 24\n      }, this),\n      handler: handleClickRestore,\n      isIcon: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 653,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      maxHeight: 300,\n      children: /*#__PURE__*/_jsxDEV(FilterList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 658,\n        columnNumber: 35\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 658,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 658,\n      columnNumber: 56\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      maxHeight: 300,\n      children: /*#__PURE__*/_jsxDEV(SettingsList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 659,\n        columnNumber: 35\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 659,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 582,\n    columnNumber: 9\n  }, this);\n};\n\n_s(VisionUIFilterModule, \"RAGQe3dYHrcmUceOiviQ0w/elJA=\", false, function () {\n  return [useROSService, useROSService, useROSService, useROSService, useROSService, useROSService, useROSService, useROSService, useROSService, useROSService, useROSService, useROSService];\n});\n\n_c = VisionUIFilterModule;\nexport default VisionUIFilterModule;\n\nvar _c;\n\n$RefreshReg$(_c, \"VisionUIFilterModule\");","map":{"version":3,"sources":["/home/alexemdesgagne/octopus-telemetry/src/src/components/VisionUiFilter.tsx"],"names":["useState","useCallback","useRef","useEffect","TextField","Select","FormControl","InputLabel","Button","ListItemText","List","ListItem","Checkbox","FormControlLabel","Tooltip","MAddCircleOutlineIcon","AddCircleOutlineIcon","MArrowDropUpIcon","ArrowDropUpIcon","MArrowDropDownIcon","ArrowDropDownIcon","MDeleteIcon","DeleteIcon","MSaveIcon","SaveIcon","MRestoreIcon","RestoreIcon","MCachedIcon","CachedIcon","useROSService","ServiceRequestFactory","VisionUIFilterModule","executionList","setExecutionList","executionSelected","setExecutionSelected","executionMedia","setExecutionMedia","executionSelectedRef","executionFilterChain","setExecutionFilterChain","filterSelected","setFilterSelected","filterList","setFilterList","filterListItems","setFilterListItems","executionFilterSelected","setExecutionFilterSelected","parameterList","setParameterList","currentParamFocus","setCurrentParamFocus","currentSubParamFocus","setCurrentSubParamFocus","executionFilterAutoSelect","setExecutionFilterAutoSelect","getExecutionFilterChainListServiceCallback","x","receivedList","list","tab","split","forEach","v","index","push","id","value","autoselectitem","item","i","getExecutionFilterChainListServiceCall","getFilterChainFromExecutionCallback","request","exec_name","current","filterchain","getMediaFromExecutionCallback","media","getFilterChainFromExecutionServiceCall","getMediaFromExecutionServiceCall","handleChangeExecution","target","request2","fillExecutionListServiceCallback","fillExecutionListServiceCall","handleRefreshExecutionList","cmd","deleteExecutionServiceCallback","deleteExecutionServiceCall","handleClickDeleteExecution","node_name","filterchain_name","media_name","setTimeout","getAllFilterChainListServiceCallback","getAllFilterChainListServiceCall","handleRefreshFilterList","handleChangeFilter","addDeleteFilterServiceCallback","addDeleteFilterServiceCall","handleClickAdd","filter","handleClickDelete","saveFilterServiceCallback","saveFilterServiceCall","handleClickSave","handleClickRestore","orderFilterServiceCallback","orderFilterServiceCall","handleClickUp","filter_index","handleClickDown","filterChainFilterObserverServiceCallback","filterChainFilterAllParamServiceCallback","obj","subv","subindex","paramName","type","parseFloat","toFixed","min","max","desc","filterChainFilterObserverServiceCall","filterChainFilterAllParamServiceCall","handSelectedExecutionFilterChain","event","execution","FilterList","props","style","map","checkSyntaxInteger","every","c","includes","checkSyntaxDouble","changeParameterServiceCallback","changeParameterServiceCall","handleChangeParamValue","arg","newValue","temporaryarray","slice","Number","parameter","SettingsList","content","padding","float","width","backgroundColor"],"mappings":"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","sourcesContent":["import { useState, useCallback, useRef, useEffect } from 'react';\n\nimport TextField from './common/textfield/Textfield';\nimport Select from './common/select/Select';\nimport FormControl from './common/Form/FormControl';\nimport InputLabel from './common/Input/InputLabel';\nimport Button from './common/button/Button'\nimport ListItemText from './common/List/ListItemText';\nimport List from './common/List/List';\nimport ListItem from './common/List/ListItem';\nimport Checkbox from './common/Checkbox/Checkbox';\nimport FormControlLabel from './common/Form/FormControlLabel'\nimport Tooltip  from './common/Tooltip/Tooltip';\n\nimport { MAddCircleOutlineIcon as AddCircleOutlineIcon } from './common/Icons/Icon';\nimport { MArrowDropUpIcon as ArrowDropUpIcon } from './common/Icons/Icon';\nimport { MArrowDropDownIcon as ArrowDropDownIcon } from './common/Icons/Icon';\nimport { MDeleteIcon as DeleteIcon } from './common/Icons/Icon';\nimport { MSaveIcon as SaveIcon } from './common/Icons/Icon';\nimport { MRestoreIcon as RestoreIcon } from './common/Icons/Icon';\nimport { MCachedIcon as CachedIcon } from './common/Icons/Icon';\n\nimport { useROSService, ServiceRequestFactory } from '../hooks/useROSService'\n\nconst VisionUIFilterModule = () => {\n\n    const [executionList, setExecutionList] = useState<[]>([]);\n    const [executionSelected, setExecutionSelected] = useState('');\n    const [executionMedia, setExecutionMedia] = useState('');\n    const executionSelectedRef = useRef('');\n    const [executionFilterChain, setExecutionFilterChain] = useState('');\n    const [filterSelected, setFilterSelected] = useState(null);\n    const [filterList, setFilterList] = useState<[]>([]);\n    const [filterListItems, setFilterListItems] = useState<[]>([]);\n    const [executionFilterSelected, setExecutionFilterSelected] = useState('');\n    const [parameterList, setParameterList] = useState<{ paramName: string, type: string, value: string, min: string, max: string, desc: string }[]>([]);\n    const [currentParamFocus, setCurrentParamFocus] = useState(0);\n    const [currentSubParamFocus, setCurrentSubParamFocus] = useState(0);\n    const [executionFilterAutoSelect, setExecutionFilterAutoSelect] = useState(0);\n\n    const getExecutionFilterChainListServiceCallback = useCallback(\n        (x: any) => {\n\n            var receivedList = x.list\n\n            var tab: any = []\n            receivedList.split(';').forEach((v: string, index: number) => {\n                tab.push({ id: index, value: v })\n            });\n\n            setFilterListItems(tab)\n\n        }, []\n    )\n\n    // Auto-select after clicked up/down on filter\n    useEffect(() => {\n\n        var autoselectitem = \"\"\n\n        filterListItems.forEach((item, i) => {\n            if (i === executionFilterAutoSelect) {\n                autoselectitem = item[\"value\"]\n            }\n        });\n\n        setExecutionFilterSelected(autoselectitem)\n\n    }, [filterListItems]);\n\n    const getExecutionFilterChainListServiceCall = useROSService<any>(getExecutionFilterChainListServiceCallback, \"/proc_image_processing/get_filterchain_filter\", \"sonia_common/GetFilterchainFilter\");\n\n    const getFilterChainFromExecutionCallback = useCallback(\n        (x: any) => {\n\n            var executionFilterChain = x.list\n            setExecutionFilterChain(executionFilterChain)\n\n        }, []\n    )\n\n    // After we get execution filter chain we can get the list of filter \n    useEffect(() => {\n\n        // Get all filter for this execution\n        var request = ServiceRequestFactory({ exec_name: executionSelectedRef.current, filterchain: executionFilterChain });\n        getExecutionFilterChainListServiceCall(request)\n\n    }, [executionFilterChain]);\n\n    const getMediaFromExecutionCallback = useCallback(\n        (x: any) => {\n\n            var media = x.list\n            setExecutionMedia(media)\n\n        }, []\n    )\n\n    const getFilterChainFromExecutionServiceCall = useROSService<any>(getFilterChainFromExecutionCallback, \"/proc_image_processing/get_media_from_execution\", \"sonia_common/GetMediaFromExecution\");\n    const getMediaFromExecutionServiceCall = useROSService<any>(getMediaFromExecutionCallback, \"/proc_image_processing/get_media_from_execution\", \"sonia_common/GetMediaFromExecution\");\n\n\n    // Clear lists if no execution selected\n    useEffect(() => {\n\n        if (executionSelected === \"None\") {\n            setFilterListItems([])\n            setParameterList([])\n        }\n\n    }, [executionSelected, executionList]);\n\n    const handleChangeExecution = (x: any) => {\n\n        setExecutionSelected(x.target.value)\n        executionSelectedRef.current = x.target.value\n\n        //Get media from execution\n        var request = ServiceRequestFactory({ exec_name: x.target.value });\n        getMediaFromExecutionServiceCall(request)\n\n        // Get filter chain from execution\n        var request2 = ServiceRequestFactory({ exec_name: x.target.value });\n        getFilterChainFromExecutionServiceCall(request2)\n\n    }\n\n    const fillExecutionListServiceCallback = useCallback(\n        (x: any) => {\n\n            var receivedList = x.list\n\n            var tab: any = []\n            receivedList.split(';').forEach((v: String, index: number) => {\n                tab.push({ id: index, value: v })\n            });\n\n            setExecutionList(tab);\n\n        }, []\n    )\n\n    const fillExecutionListServiceCall = useROSService<any>(fillExecutionListServiceCallback, \"/proc_image_processing/get_information_list\", \"sonia_common/GetInformationList\");\n\n    const handleRefreshExecutionList = (x: any) => {\n\n        var request = ServiceRequestFactory({ cmd: 1 });\n        fillExecutionListServiceCall(request)\n    }\n\n    const deleteExecutionServiceCallback = useCallback(\n        (x: any) => {\n        }, []\n    )\n\n    const deleteExecutionServiceCall = useROSService<any>(deleteExecutionServiceCallback, \"/proc_image_processing/execute_cmd\", \"sonia_common/ExecuteCmd\");\n\n    const handleClickDeleteExecution = (value: any) => {\n\n        setFilterListItems([])\n        setParameterList([])\n\n        if (executionSelected !== '' && executionMedia !== '' && executionFilterChain !== '') {\n\n            var request = ServiceRequestFactory({ node_name: executionSelected, filterchain_name: executionFilterChain, media_name: executionMedia, cmd: 2 });\n            deleteExecutionServiceCall(request)\n\n            setExecutionMedia('')\n            setExecutionFilterChain('')\n            setExecutionSelected('')\n\n            // Refresh execution list after delete\n            setTimeout(() => {\n                var request = ServiceRequestFactory({ cmd: 1 });\n                fillExecutionListServiceCall(request)\n            }, 500)\n\n\n        }\n\n    }\n\n    const getAllFilterChainListServiceCallback = useCallback(\n        (x: any) => {\n\n            var receivedList = x.list\n\n            var tab: any = []\n            receivedList.split(';').forEach((v: String, index: number) => {\n                tab.push({ id: index, value: v })\n            });\n\n            setFilterList(tab)\n\n        }, []\n    )\n\n    const getAllFilterChainListServiceCall = useROSService<any>(getAllFilterChainListServiceCallback, \"/proc_image_processing/get_information_list\", \"sonia_common/GetInformationList\");\n\n    const handleRefreshFilterList = () => {\n\n        var request = ServiceRequestFactory({ cmd: 4 });\n        getAllFilterChainListServiceCall(request)\n\n    }\n\n    const handleChangeFilter = (x: any) => {\n        setFilterSelected(x.target.value)\n    }\n\n    const addDeleteFilterServiceCallback = useCallback(\n        (x: any) => {\n        }, []\n    )\n\n    const addDeleteFilterServiceCall = useROSService<any>(addDeleteFilterServiceCallback, \"/proc_image_processing/manage_filterchain_filter\", \"sonia_common/ManageFilterchain\");\n\n    const handleClickAdd = () => {\n\n        setCurrentParamFocus(-1)\n\n        if (executionSelected !== '' && executionFilterChain !== '' && filterSelected !== '') {\n\n            var request = ServiceRequestFactory({ exec_name: executionSelected, filterchain: executionFilterChain, filter: filterSelected, cmd: 1 });\n            addDeleteFilterServiceCall(request)\n\n            setTimeout(() => {\n                //Update filter list\n                var request2 = ServiceRequestFactory({ exec_name: executionSelected, filterchain: executionFilterChain });\n                getExecutionFilterChainListServiceCall(request2)\n            }, 500)\n\n        }\n\n    }\n\n    const handleClickDelete = () => {\n\n        setCurrentParamFocus(-1)\n\n        if (executionSelected !== '' && executionFilterChain !== '' && executionFilterSelected !== '') {\n\n            var request = ServiceRequestFactory({ exec_name: executionSelected, filterchain: executionFilterChain, filter: executionFilterSelected, cmd: 2 });\n            addDeleteFilterServiceCall(request)\n\n            setTimeout(() => {\n                //Update filter list\n                var request2 = ServiceRequestFactory({ exec_name: executionSelected, filterchain: executionFilterChain });\n                getExecutionFilterChainListServiceCall(request2)\n            }, 500)\n\n        }\n\n    }\n\n    const saveFilterServiceCallback = useCallback(\n        (x: any) => {\n        }, []\n    )\n\n    const saveFilterServiceCall = useROSService<any>(saveFilterServiceCallback, \"/proc_image_processing/save_filterchain\", \"sonia_common/SaveFilterchain\");\n\n    const handleClickSave = () => {\n\n        setCurrentParamFocus(-1)\n\n        if (executionSelected !== '' && executionFilterChain !== '') {\n\n            var request = ServiceRequestFactory({ exec_name: executionSelected, filterchain: executionFilterChain, cmd: 1 });\n            saveFilterServiceCall(request)\n        }\n\n    }\n\n    const handleClickRestore = () => {\n\n        setCurrentParamFocus(-1)\n\n        if (executionSelected !== '' && executionFilterChain !== '') {\n\n            var request = ServiceRequestFactory({ exec_name: executionSelected, filterchain: executionFilterChain, cmd: 2 });\n            saveFilterServiceCall(request)\n\n            setTimeout(() => {\n                //Update filter list\n                var request2 = ServiceRequestFactory({ exec_name: executionSelected, filterchain: executionFilterChain });\n                getExecutionFilterChainListServiceCall(request2)\n            }, 500)\n\n        }\n\n    }\n\n    const orderFilterServiceCallback = useCallback(\n        (x: any) => {\n        }, []\n    )\n\n    const orderFilterServiceCall = useROSService<any>(orderFilterServiceCallback, \"/proc_image_processing/set_filterchain_filter_order\", \"sonia_common/SetFilterchainFilterOrder\");\n\n\n    const handleClickUp = () => {\n\n        setCurrentParamFocus(-1)\n\n        if (executionSelected !== '' && executionFilterChain !== '' && executionFilterSelected !== '') {\n\n            var index = -1\n\n            filterListItems.forEach((item, i) => {\n                if (item['value'] === executionFilterSelected) {\n                    index = item['id']\n                }\n            })\n\n            if (index !== -1) {\n\n                setExecutionFilterAutoSelect(index - 1)\n\n                var request = ServiceRequestFactory({ exec_name: executionSelected, filterchain: executionFilterChain, filter_index: index, cmd: 1 });\n                orderFilterServiceCall(request)\n\n                setTimeout(() => {\n                    //Update filter list\n                    var request2 = ServiceRequestFactory({ exec_name: executionSelected, filterchain: executionFilterChain });\n                    getExecutionFilterChainListServiceCall(request2)\n                }, 500)\n\n            }\n\n        }\n\n    }\n\n    const handleClickDown = () => {\n\n        setCurrentParamFocus(-1)\n\n        if (executionSelected !== '' && executionFilterChain !== '' && executionFilterSelected !== '') {\n\n            var index = -1\n\n            filterListItems.forEach((item, i) => {\n                if (item['value'] === executionFilterSelected)\n                    index = item['id']\n            })\n\n            if (index !== -1) {\n\n                setExecutionFilterAutoSelect(index + 1)\n\n                var request = ServiceRequestFactory({ exec_name: executionSelected, filterchain: executionFilterChain, filter_index: index, cmd: 2 });\n                orderFilterServiceCall(request)\n\n                setTimeout(() => {\n                    //Update filter list\n                    var request2 = ServiceRequestFactory({ exec_name: executionSelected, filterchain: executionFilterChain });\n                    getExecutionFilterChainListServiceCall(request2)\n                }, 500)\n\n            }\n        }\n    }\n\n    const filterChainFilterObserverServiceCallback = useCallback(\n        (x: any) => {\n\n        }, []\n    )\n\n    const filterChainFilterAllParamServiceCallback = useCallback(\n        (x: any) => {\n\n            var receivedList = x.list\n\n            var tab: any = []\n            receivedList.split(';').forEach((v: string, index: number) => {\n\n                var obj = {\n                    \"paramName\": \"\",\n                    \"type\": \"\",\n                    \"value\": \"\",\n                    \"min\": \"\",\n                    \"max\": \"\",\n                    \"desc\": \"\"\n                }\n\n                v.split('|').forEach((subv: string, subindex: number) => {\n\n                    if (subindex === 0)\n                        obj.paramName = subv\n\n                    if (subindex === 1)\n                        obj.type = subv\n\n                    if (subindex === 2)\n                        obj.value = obj.type === \"Double\" ? parseFloat(subv).toFixed(2) : subv\n\n                    if (subindex === 3)\n                        obj.min = obj.type === \"Double\" ? parseFloat(subv).toFixed(2) : subv\n\n                    if (subindex === 4)\n                        obj.max = obj.type === \"Double\" ? parseFloat(subv).toFixed(2) : subv\n\n                    if (subindex === 5)\n                        obj.desc = subv\n                });\n\n                tab.push(obj)\n\n            });\n\n            setParameterList(tab)\n\n        }, []\n    )\n\n    const filterChainFilterObserverServiceCall = useROSService<any>(filterChainFilterObserverServiceCallback, \"/proc_image_processing/set_filterchain_filter_observer\", \"sonia_common/SetFilterchainFilterObserver\");\n    const filterChainFilterAllParamServiceCall = useROSService<any>(filterChainFilterAllParamServiceCallback, \"/proc_image_processing/get_filterchain_filter_all_param\", \"sonia_common/GetFilterchainFilterAllParam\");\n\n    const handSelectedExecutionFilterChain = (event: any, value: any) => {\n\n        setExecutionFilterSelected(value);\n\n        // When selection changed send information about what filter currently observed and get parameters for this filter\n        var request = ServiceRequestFactory({ execution: executionSelected, filterchain: executionFilterChain, filter: value });\n        filterChainFilterObserverServiceCall(request)\n\n        setTimeout(() => {\n            // and get parameters for this filter\n            var request2 = ServiceRequestFactory({ exec_name: executionSelected, filterchain: executionFilterChain, filter: value });\n            filterChainFilterAllParamServiceCall(request2)\n        }, 500)\n\n    };\n\n    function FilterList(props: any) {\n\n        const { index, style } = props;\n\n        return (\n            <div>\n                {filterListItems.map((item) => (\n                    <ListItem style={style} key={\"filterList\" + item['id']} selected={executionFilterSelected === item['value']} autoFocus={executionFilterSelected === item['value']}>\n                        <ListItemText primary={item['value']} handler={(event: any) => handSelectedExecutionFilterChain(event, item['value'])} />\n                    </ListItem>\n                ))}\n            </div>\n        );\n    }\n\n    const checkSyntaxInteger = (v: any) => [...v].every(c => '0123456789-'.includes(c));\n    const checkSyntaxDouble = (v: any) => [...v].every(c => '0123456789-.'.includes(c));\n\n    const changeParameterServiceCallback = useCallback(\n        (x: any) => {\n\n        }, []\n    )\n\n    const changeParameterServiceCall = useROSService<any>(changeParameterServiceCallback, \"/proc_image_processing/set_filterchain_filter_param\", \"sonia_common/SetFilterchainFilterParam\");\n\n    const handleChangeParamValue = (event: any, index: any, arg: any) => {\n\n        setCurrentParamFocus(index)\n\n        var newValue = event.target.value\n\n        parameterList?.forEach((item, i) => {\n\n            if (i === index) {\n\n                if (item['type'] === \"Boolean\") {\n                    let temporaryarray = parameterList.slice();\n                    if (item['value'] === \"0\") {\n                        temporaryarray[index][\"value\"] = \"1\";\n                        newValue = \"1\";\n                    }\n                    else {\n                        temporaryarray[index][\"value\"] = \"0\";\n                        newValue = \"0\";\n                    }\n                    setParameterList(temporaryarray);\n                }\n                if (item['type'] === \"Integer\" || item['type'] === \"Double\") {\n                    let temporaryarray = parameterList.slice();\n                    if (arg === \"value\") {\n                        if ((checkSyntaxInteger(newValue) && item['type'] === \"Integer\") || (checkSyntaxDouble(newValue) && item['type'] === \"Double\"))\n                            temporaryarray[index][\"value\"] = newValue;\n                        setCurrentSubParamFocus(1)\n                    }\n                    if (arg === \"min\") {\n                        if ((checkSyntaxInteger(newValue) && item['type'] === \"Integer\") || (checkSyntaxDouble(newValue) && item['type'] === \"Double\"))\n                            temporaryarray[index][\"min\"] = newValue;\n                        setCurrentSubParamFocus(2)\n                    }\n                    if (arg === \"max\") {\n                        if ((checkSyntaxInteger(newValue) && item['type'] === \"Integer\") || (checkSyntaxDouble(newValue) && item['type'] === \"Double\"))\n                            temporaryarray[index][\"max\"] = newValue;\n                        setCurrentSubParamFocus(3)\n                    }\n                    setParameterList(temporaryarray);\n                }\n                if (item['type'] === \"String\") {\n                    let temporaryarray = parameterList.slice();\n                    if (arg === \"value\") {\n                        temporaryarray[index][\"value\"] = newValue;\n                    }\n                    setParameterList(temporaryarray);\n                }\n\n                // Send ros command for notify param changed\n                if (((newValue !== '')) && (\n                    (((item['type'] === \"Integer\") || (item['type'] === \"Double\")) && (Number(newValue) <= Number(item['max'])) && (Number(newValue) >= Number(item['min'])))\n                    || ((item['type'] !== \"Integer\") && (item['type'] !== \"Double\")))) {\n\n                    if (item['type'] === \"Double\")\n                        newValue = \"\" + parseFloat(newValue)\n\n                    var request = ServiceRequestFactory({ exec_name: executionSelected, filterchain: executionFilterChain, filter: executionFilterSelected, parameter: item['paramName'], value: newValue });\n                    changeParameterServiceCall(request)\n\n                }\n            }\n        })\n    }\n\n\n    function SettingsList(props: any) {\n\n        const { index, style } = props;\n\n        let content: any = []\n\n        parameterList?.forEach((item, index) => {\n\n            if (item['type'] === \"Boolean\") {\n\n                content.push(\n                    <Tooltip title={item['desc']}>\n                        <ListItem style={style} key={\"paramList\" + item['paramName']}>\n                            <FormControlLabel\n                                control={<Checkbox name={item['paramName']} color=\"primary\" checked={item['value'] === '1'} handler={(event: any) => handleChangeParamValue(event, index, \"value\")} />}\n                                label={item['paramName']}\n                            />\n                        </ListItem>\n                    </Tooltip>\n                )\n            }\n\n            if (item['type'] === \"Integer\" || item['type'] === \"Double\") {\n\n                content.push(\n                    <Tooltip title={item['desc']}>\n                        <ListItem style={style} key={\"paramList\" + item['paramName']}>\n                            <TextField type={item['type'] === \"Integer\" ? 'number' : \"float\"} autoFocus={currentParamFocus === index && currentSubParamFocus === 1} value={item['value']} handlerChange={(event: any) => handleChangeParamValue(event, index, \"value\")} handlerKeyDown={() => { }} id={\"paramvalue_id\" + index} label=\"Value\" style={{ padding: '10px 10px', float: \"left\", width: \"120px\" }} />\n                            <TextField disabled={true} value={item['min']} handlerChange={(event: any) => handleChangeParamValue(event, index, \"min\")} handlerKeyDown={() => { }} id={\"parammin_id\" + index} label=\"Min\" style={{ padding: '10px 10px', float: \"left\", width: \"120px\" }} />\n                            <TextField disabled={true} value={item['max']} handlerChange={(event: any) => handleChangeParamValue(event, index, \"max\")} handlerKeyDown={() => { }} id={\"parammax_id\" + index} label=\"Max\" style={{ padding: '10px 10px', float: \"left\", width: \"120px\" }} />\n                        </ListItem>\n                    </Tooltip>\n                )\n\n            }\n\n            if (item['type'] === \"String\") {\n\n                content.push(\n                    <Tooltip title={item['desc']}>\n                        <ListItem style={style} key={\"paramList\" + item['paramName']}>\n                            <TextField autoFocus={currentParamFocus === index} value={item['value']} handlerChange={(event: any) => handleChangeParamValue(event, index, \"value\")} handlerKeyDown={() => { }} id={\"paramvalue_id\" + index} label=\"Value\" style={{ padding: '10px 10px', float: \"left\", width: \"300px\" }} />\n                        </ListItem>\n                    </Tooltip>\n                )\n            }\n        })\n\n        return (<div>{content}</div>);\n    }\n\n    return (\n        <div>\n            <FormControl>\n                <InputLabel id=\"execution-outlined-label\">Execution</InputLabel>\n                <Select\n                    labelId=\"execution-outlined-label\"\n                    fullWidth={true}\n                    id=\"sexecution-outlined\"\n                    handlerChange={handleChangeExecution}\n                    label=\"Execution\"\n                    value={executionSelected ? executionSelected : \"None\"}\n                    style={{ backgroundColor: 'white' }}\n                    listValue={executionList}\n                >\n                </Select>\n            </FormControl>\n            <Button\n                label={<CachedIcon />}\n                handler={handleRefreshExecutionList}\n                isIcon={true}\n            ></Button>\n            <Button\n                label={<DeleteIcon />}\n                handler={handleClickDeleteExecution}\n                isIcon={true}\n            ></Button>\n            <br></br>\n            <FormControl>\n                <InputLabel id=\"selectFilter-outlined-label\">Filter</InputLabel>\n                <Select\n                    labelId=\"selectFilter-outlined-label\"\n                    fullWidth={true}\n                    id=\"selectFilter-outlined\"\n                    handlerChange={handleChangeFilter}\n                    label=\"Filter\"\n                    value={filterSelected ? filterSelected : \"None\"}\n                    style={{ backgroundColor: 'white' }}\n                    listValue={filterList}\n                >\n                </Select>\n            </FormControl>\n            <Button\n                label={<CachedIcon />}\n                handler={handleRefreshFilterList}\n                isIcon={true}\n            ></Button>\n            <br></br>\n            <Button\n                label={<AddCircleOutlineIcon />}\n                handler={handleClickAdd}\n                isIcon={true}\n            ></Button>\n            <Button\n                label={<ArrowDropUpIcon />}\n                handler={handleClickUp}\n                isIcon={true}\n            ></Button>\n            <Button\n                label={<ArrowDropDownIcon />}\n                handler={handleClickDown}\n                isIcon={true}\n            ></Button>\n            <Button\n                label={<DeleteIcon />}\n                handler={handleClickDelete}\n                isIcon={true}\n            ></Button>\n            <Button\n                label={<SaveIcon />}\n                handler={handleClickSave}\n                isIcon={true}\n            ></Button>\n            <Button\n                label={<RestoreIcon />}\n                handler={handleClickRestore}\n                isIcon={true}\n            />\n            <List maxHeight={300}><FilterList /></List><br></br>\n            <List maxHeight={300}><SettingsList /></List>\n        </div>\n    );\n};\n\nexport default VisionUIFilterModule;\n"]},"metadata":{},"sourceType":"module"}