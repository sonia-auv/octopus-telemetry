{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useContext } from \"react\";\nimport ROSLIB from \"roslib\";\nimport { RosContext } from \"../context/rosContext\";\nexport const useROSTopicSubscriber = (callback, name, messageType) => {\n  _s();\n\n  const ros = useContext(RosContext);\n  useEffect(() => {\n    const topic = new ROSLIB.Topic({\n      ros,\n      name,\n      messageType\n    });\n    topic.subscribe(x => callback(x));\n    return () => {\n      if (topic) {\n        topic.unsubscribe();\n      }\n    };\n  }, [ros, name, messageType, callback]);\n};\n\n_s(useROSTopicSubscriber, \"gJKRrjYYLerVVs1hz4+CaQLZJIs=\");","map":{"version":3,"sources":["/home/alexemdesgagne/octopus-telemetry/src/src/hooks/useROSTopicSubscriber.ts"],"names":["useEffect","useContext","ROSLIB","RosContext","useROSTopicSubscriber","callback","name","messageType","ros","topic","Topic","subscribe","x","unsubscribe"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,UAApB,QAAsC,OAAtC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,UAAT,QAA2B,uBAA3B;AAEA,OAAO,MAAMC,qBAAqB,GAAG,CACjCC,QADiC,EAEjCC,IAFiC,EAGjCC,WAHiC,KAIhC;AAAA;;AACD,QAAMC,GAAG,GAAGP,UAAU,CAACE,UAAD,CAAtB;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMS,KAAK,GAAG,IAAIP,MAAM,CAACQ,KAAX,CAAiB;AAC3BF,MAAAA,GAD2B;AAE3BF,MAAAA,IAF2B;AAG3BC,MAAAA;AAH2B,KAAjB,CAAd;AAKAE,IAAAA,KAAK,CAACE,SAAN,CAAiBC,CAAD,IAAOP,QAAQ,CAACO,CAAD,CAA/B;AAEA,WAAO,MAAM;AACT,UAAIH,KAAJ,EAAW;AACPA,QAAAA,KAAK,CAACI,WAAN;AACH;AACJ,KAJD;AAKH,GAbQ,EAaN,CAACL,GAAD,EAAMF,IAAN,EAAYC,WAAZ,EAAyBF,QAAzB,CAbM,CAAT;AAcH,CArBM;;GAAMD,qB","sourcesContent":["import { useEffect, useContext } from \"react\";\r\nimport ROSLIB from \"roslib\";\r\nimport { RosContext } from \"../context/rosContext\";\r\n\r\nexport const useROSTopicSubscriber = <F>(\r\n    callback: (m: F) => void,\r\n    name: string,\r\n    messageType: string\r\n) => {\r\n    const ros = useContext(RosContext);\r\n\r\n    useEffect(() => {\r\n        const topic = new ROSLIB.Topic({\r\n            ros,\r\n            name,\r\n            messageType,\r\n        });\r\n        topic.subscribe((x) => callback(x as F));\r\n\r\n        return () => {\r\n            if (topic) {\r\n                topic.unsubscribe();\r\n            }\r\n        };\r\n    }, [ros, name, messageType, callback]);\r\n};"]},"metadata":{},"sourceType":"module"}